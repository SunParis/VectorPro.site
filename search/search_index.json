{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to VectorPro's Tutorial Site","text":"<p>Source code is here.</p>"},{"location":"#vector_pro","title":"vector_pro","text":"<pre><code>template &lt; class T &gt; class vector_pro; // generic template\n</code></pre> <p>Same as std::vectors, vector_pros are sequence containers representing arrays that can change in size.</p> <p>Vector_pros use contiguous storage locations for their elements. Unlike arrays, their size can change dynamically, with their storage being handled automatically by the container.</p> <p>Don't have much differences with vectors, vector_pros use a dynamically allocated array to store their elements. Instead of reallocating each time an element is added to the container, vector_pro containers may allocate some extra storage to accommodate for possible growth, and thus the container may have an actual capacity greater than the storage strictly needed to contain its elements. However we currently not support libraries to implement different strategies for memory growth, we just simply double the capacity at logarithmically growing intervals of size so that the insertion of individual elements at the end of the vector can be provided with amortized constant time complexity.</p> <p>Most of the above text are just copied from std::vector.</p>"},{"location":"#template-parameters","title":"Template parameters","text":"<pre><code>template &lt;class T&gt;\n</code></pre> <p>Only if <code>T</code> is guaranteed to not throw while moving, implementations can optimize to move elements instead of copying them during reallocations.</p>"},{"location":"#member-types","title":"Member types","text":"member type definition notes <code>iterator_pro</code> a random access iterator to <code>value_type</code> convertible to <code>const_iterator</code> <code>const_iterator_pro</code> a random access iterator to <code>const value_type</code> <code>size_type</code> an unsigned integral type In 64-bit system will be <code>int64_t</code>; 32-bit system will be <code>int32_t</code>; the others will just be <code>long int</code>."},{"location":"#member-functions","title":"Member functions","text":"name notes (constructor) Construct vector (public member function) (destructor) Vector destructor (public member function) operator= Assign content (public member function)"},{"location":"#itertators","title":"Itertators","text":"name notes begin Return iterator to beginning (public member function) end Return iterator to end (public member function) rbegin Return reverse iterator to reverse beginning (public member function) rend Return reverse iterator to reverse end (public member function) cbegin Return const_iterator to beginning (public member function) cend Return const_iterator to end (public member function) crbegin Return const_reverse_iterator to reverse beginning (public member function) crend Return const_reverse_iterator to reverse end (public member function)"},{"location":"#capacity","title":"Capacity","text":"name notes size Return size (public member function) max_size Return maximum size (public member function) resize Change size (public member function) capacity Return size of allocated storage capacity (public member function) empty Test whether vector is empty (public member function) reserve Request a change in capacity (public member function) shrink_to_fit Shrink to fit (public member function)"},{"location":"#element-access","title":"Element access","text":"name notes operator[] Access element (public member function) at Access element (public member function) front Access first element (public member function) back Access last element (public member function) data Access data"},{"location":"#modifiers","title":"Modifiers","text":"name notes assign Assign vector content (public member function) push_back Add element at the end (public member function) pop_back Delete last element (public member function) insert Insert elements (public member function) erase Erase elements (public member function) swap Swap content (public member function) clear Clear content (public member function) emplace Construct and insert element (public member function) emplace_back Construct and insert element at the end (public member function)"},{"location":"#differences-from-stdvector","title":"Differences from std::vector","text":"name notes not_empty Test whether vector is not empty (public member function) push Add element at the end (public member function) pop Delete last element from the vector and return it back (public member function) merge Copy another vector to the end (public member function) find Find an element in the vector (public member function) sort Sort the vector (public member function) print Print the vector (public member function) operator&lt;&lt; Turn the vector into an <code>std::ostream</code> (public friend member function)"},{"location":"see_also/","title":"See Also","text":"<p>To learn more about std::vector.</p> <p>To visit out gihub page.</p>"},{"location":"functions/constructor/","title":"vector_pro::~vector_pro","text":"<pre><code>// code\n</code></pre>"},{"location":"functions/constructor/#construct-vector","title":"Construct vector","text":"<p>//</p>"},{"location":"functions/constructor/#parameters","title":"Parameters","text":"<p>//</p>"},{"location":"functions/constructor/#example","title":"Example","text":"<pre><code>// code\n</code></pre> <p>//</p>"},{"location":"functions/constructor/#complexity","title":"Complexity","text":"<p>///</p>"},{"location":"functions/destructor/","title":"vector_pro::vector_pro","text":"<pre><code>// code\n</code></pre>"},{"location":"functions/destructor/#construct-vector","title":"Construct vector","text":"<p>//</p>"},{"location":"functions/destructor/#parameters","title":"Parameters","text":"<p>//</p>"},{"location":"functions/destructor/#example","title":"Example","text":"<pre><code>// code\n</code></pre> <p>//</p>"},{"location":"functions/destructor/#complexity","title":"Complexity","text":"<p>///</p>"},{"location":"functions/function_name/","title":"function_name","text":"<pre><code>// code\n</code></pre>"},{"location":"functions/function_name/#construct-vector","title":"Construct vector","text":"<p>//</p>"},{"location":"functions/function_name/#parameters","title":"Parameters","text":"<p>//</p>"},{"location":"functions/function_name/#example","title":"Example","text":"<pre><code>// code\n</code></pre> <p>//</p>"},{"location":"functions/function_name/#complexity","title":"Complexity","text":"<p>///</p>"},{"location":"tests/test1/","title":"test_title","text":"<p>// intro</p>"},{"location":"tests/test1/#test-code","title":"Test Code","text":"<pre><code>// code\n</code></pre> <p>///</p>"},{"location":"tests/test1/#result","title":"Result","text":"<p>///</p>"}]}